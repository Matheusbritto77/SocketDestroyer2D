const sanitizeHtml = require('sanitize-html');

class MessageSanitizer {
  constructor() {
    // Configura√ß√£o de sanitiza√ß√£o
    this.sanitizeOptions = {
      allowedTags: [
        'b', 'i', 'em', 'strong', 'u', 'br', 'p', 'span',
        'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
        'ul', 'ol', 'li', 'blockquote', 'code', 'pre'
      ],
      allowedAttributes: {
        '*': ['class', 'style'],
        'span': ['class', 'style'],
        'p': ['class', 'style'],
        'code': ['class'],
        'pre': ['class']
      },
      allowedStyles: {
        '*': {
          'color': [/^#(0x)?[0-9a-f]+$/i, /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/],
          'text-align': [/^left$/, /^right$/, /^center$/],
          'font-size': [/^\d+(?:px|em|%)$/],
          'font-weight': [/^bold$/, /^normal$/],
          'text-decoration': [/^underline$/, /^line-through$/]
        }
      },
      disallowedTagsMode: 'recursiveEscape'
    };

    // Emojis permitidos
    this.allowedEmojis = new Set([
      'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá',
      'üôÇ', 'üôÉ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò', 'üòó', 'üòô', 'üòö',
      'üòã', 'üòõ', 'üòù', 'üòú', 'ü§™', 'ü§®', 'üßê', 'ü§ì', 'üòé', 'ü§©',
      'ü•≥', 'üòè', 'üòí', 'üòû', 'üòî', 'üòü', 'üòï', 'üôÅ', '‚òπÔ∏è', 'üò£',
      'üòñ', 'üò´', 'üò©', 'ü•∫', 'üò¢', 'üò≠', 'üò§', 'üò†', 'üò°', 'ü§¨',
      'ü§Ø', 'üò≥', 'ü•µ', 'ü•∂', 'üò±', 'üò®', 'üò∞', 'üò•', 'üòì', 'ü§ó',
      'ü§î', 'ü§≠', 'ü§´', 'ü§•', 'üò∂', 'üòê', 'üòë', 'üòØ', 'üò¶', 'üòß',
      'üòÆ', 'üò≤', 'ü•±', 'üò¥', 'ü§§', 'üò™', 'üòµ', 'ü§ê', 'ü•¥', 'ü§¢',
      'ü§Æ', 'ü§ß', 'üò∑', 'ü§í', 'ü§ï', 'ü§ë', 'ü§†', 'üí©', 'üëª', 'üíÄ',
      '‚ò†Ô∏è', 'üëΩ', 'üëæ', 'ü§ñ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ',
      'üôÄ', 'üòø', 'üòæ', 'üôà', 'üôâ', 'üôä', 'üë∂', 'üëß', 'üßí', 'üë¶',
      'üë©', 'üßë', 'üë®', 'üëµ', 'üßì', 'üë¥', 'üëÆ‚Äç‚ôÄÔ∏è', 'üëÆ', 'üëÆ‚Äç‚ôÇÔ∏è',
      'üïµÔ∏è‚Äç‚ôÄÔ∏è', 'üïµÔ∏è', 'üïµÔ∏è‚Äç‚ôÇÔ∏è', 'üíÇ‚Äç‚ôÄÔ∏è', 'üíÇ', 'üíÇ‚Äç‚ôÇÔ∏è', 'üë∑‚Äç‚ôÄÔ∏è',
      'üë∑', 'üë∑‚Äç‚ôÇÔ∏è', 'ü§¥', 'üë∏', 'üë≥‚Äç‚ôÄÔ∏è', 'üë≥', 'üë≥‚Äç‚ôÇÔ∏è', 'üë≤', 'üßï',
      'ü§µ', 'üë∞', 'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'ü§∂', 'üßô‚Äç‚ôÄÔ∏è', 'üßô',
      'üßô‚Äç‚ôÇÔ∏è', 'üßù‚Äç‚ôÄÔ∏è', 'üßù', 'üßù‚Äç‚ôÇÔ∏è', 'üßõ‚Äç‚ôÄÔ∏è', 'üßõ', 'üßõ‚Äç‚ôÇÔ∏è',
      'üßü‚Äç‚ôÄÔ∏è', 'üßü', 'üßü‚Äç‚ôÇÔ∏è', 'üßû‚Äç‚ôÄÔ∏è', 'üßû', 'üßû‚Äç‚ôÇÔ∏è', 'üßú‚Äç‚ôÄÔ∏è',
      'üßú', 'üßú‚Äç‚ôÇÔ∏è', 'üßö‚Äç‚ôÄÔ∏è', 'üßö', 'üßö‚Äç‚ôÇÔ∏è', 'üëº', 'ü§∞', 'ü§±',
      'üôá‚Äç‚ôÄÔ∏è', 'üôá', 'üôá‚Äç‚ôÇÔ∏è', 'üíÅ‚Äç‚ôÄÔ∏è', 'üíÅ', 'üíÅ‚Äç‚ôÇÔ∏è', 'üôÖ‚Äç‚ôÄÔ∏è',
      'üôÖ', 'üôÖ‚Äç‚ôÇÔ∏è', 'üôÜ‚Äç‚ôÄÔ∏è', 'üôÜ', 'üôÜ‚Äç‚ôÇÔ∏è', 'üôã‚Äç‚ôÄÔ∏è', 'üôã', 'üôã‚Äç‚ôÇÔ∏è',
      'ü§¶‚Äç‚ôÄÔ∏è', 'ü§¶', 'ü§¶‚Äç‚ôÇÔ∏è', 'ü§∑‚Äç‚ôÄÔ∏è', 'ü§∑', 'ü§∑‚Äç‚ôÇÔ∏è', 'üë®‚Äç‚öïÔ∏è',
      'üë©‚Äç‚öïÔ∏è', 'üë®‚Äçüéì', 'üë©‚Äçüéì', 'üë®‚Äçüè´', 'üë©‚Äçüè´', 'üë®‚Äç‚öñÔ∏è', 'üë©‚Äç‚öñÔ∏è',
      'üë®‚Äçüåæ', 'üë©‚Äçüåæ', 'üë®‚Äçüç≥', 'üë©‚Äçüç≥', 'üë®‚Äçüîß', 'üë©‚Äçüîß', 'üë®‚Äçüè≠',
      'üë©‚Äçüè≠', 'üë®‚Äçüíº', 'üë©‚Äçüíº', 'üë®‚Äçüî¨', 'üë©‚Äçüî¨', 'üë®‚Äçüíª', 'üë©‚Äçüíª',
      'üë®‚Äçüé§', 'üë©‚Äçüé§', 'üë®‚Äçüé®', 'üë©‚Äçüé®', 'üë®‚Äç‚úàÔ∏è', 'üë©‚Äç‚úàÔ∏è', 'üë®‚ÄçüöÄ',
      'üë©‚ÄçüöÄ', 'üë®‚Äçüöí', 'üë©‚Äçüöí', 'üëÆ‚Äç‚ôÄÔ∏è', 'üëÆ', 'üëÆ‚Äç‚ôÇÔ∏è', 'üïµÔ∏è‚Äç‚ôÄÔ∏è',
      'üïµÔ∏è', 'üïµÔ∏è‚Äç‚ôÇÔ∏è', 'üíÇ‚Äç‚ôÄÔ∏è', 'üíÇ', 'üíÇ‚Äç‚ôÇÔ∏è', 'üë∑‚Äç‚ôÄÔ∏è', 'üë∑', 'üë∑‚Äç‚ôÇÔ∏è',
      'ü§¥', 'üë∏', 'üë≥‚Äç‚ôÄÔ∏è', 'üë≥', 'üë≥‚Äç‚ôÇÔ∏è', 'üë≤', 'üßï', 'ü§µ', 'üë∞',
      'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'ü§∂', 'üßô‚Äç‚ôÄÔ∏è', 'üßô', 'üßô‚Äç‚ôÇÔ∏è', 'üßù‚Äç‚ôÄÔ∏è',
      'üßù', 'üßù‚Äç‚ôÇÔ∏è', 'üßõ‚Äç‚ôÄÔ∏è', 'üßõ', 'üßõ‚Äç‚ôÇÔ∏è', 'üßü‚Äç‚ôÄÔ∏è', 'üßü', 'üßü‚Äç‚ôÇÔ∏è',
      'üßû‚Äç‚ôÄÔ∏è', 'üßû', 'üßû‚Äç‚ôÇÔ∏è', 'üßú‚Äç‚ôÄÔ∏è', 'üßú', 'üßú‚Äç‚ôÇÔ∏è', 'üßö‚Äç‚ôÄÔ∏è', 'üßö',
      'üßö‚Äç‚ôÇÔ∏è', 'üëº', 'ü§∞', 'ü§±', 'üôá‚Äç‚ôÄÔ∏è', 'üôá', 'üôá‚Äç‚ôÇÔ∏è', 'üíÅ‚Äç‚ôÄÔ∏è',
      'üíÅ', 'üíÅ‚Äç‚ôÇÔ∏è', 'üôÖ‚Äç‚ôÄÔ∏è', 'üôÖ', 'üôÖ‚Äç‚ôÇÔ∏è', 'üôÜ‚Äç‚ôÄÔ∏è', 'üôÜ', 'üôÜ‚Äç‚ôÇÔ∏è',
      'üôã‚Äç‚ôÄÔ∏è', 'üôã', 'üôã‚Äç‚ôÇÔ∏è', 'ü§¶‚Äç‚ôÄÔ∏è', 'ü§¶', 'ü§¶‚Äç‚ôÇÔ∏è', 'ü§∑‚Äç‚ôÄÔ∏è', 'ü§∑',
      'ü§∑‚Äç‚ôÇÔ∏è', 'üë®‚Äç‚öïÔ∏è', 'üë©‚Äç‚öïÔ∏è', 'üë®‚Äçüéì', 'üë©‚Äçüéì', 'üë®‚Äçüè´', 'üë©‚Äçüè´',
      'üë®‚Äç‚öñÔ∏è', 'üë©‚Äç‚öñÔ∏è', 'üë®‚Äçüåæ', 'üë©‚Äçüåæ', 'üë®‚Äçüç≥', 'üë©‚Äçüç≥', 'üë®‚Äçüîß',
      'üë©‚Äçüîß', 'üë®‚Äçüè≠', 'üë©‚Äçüè≠', 'üë®‚Äçüíº', 'üë©‚Äçüíº', 'üë®‚Äçüî¨', 'üë©‚Äçüî¨',
      'üë®‚Äçüíª', 'üë©‚Äçüíª', 'üë®‚Äçüé§', 'üë©‚Äçüé§', 'üë®‚Äçüé®', 'üë©‚Äçüé®', 'üë®‚Äç‚úàÔ∏è',
      'üë©‚Äç‚úàÔ∏è', 'üë®‚ÄçüöÄ', 'üë©‚ÄçüöÄ', 'üë®‚Äçüöí', 'üë©‚Äçüöí'
    ]);
  }

  // Sanitiza uma mensagem
  sanitizeMessage(content) {
    if (typeof content !== 'string') {
      return '';
    }

    // Remove caracteres de controle perigosos
    let sanitized = content
      .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '')
      .trim();

    // Verifica se a mensagem est√° vazia ap√≥s limpeza
    if (!sanitized) {
      return '';
    }

    // Sanitiza HTML
    sanitized = sanitizeHtml(sanitized, this.sanitizeOptions);

    // Limita o tamanho da mensagem
    if (sanitized.length > 1000) {
      sanitized = sanitized.substring(0, 1000) + '...';
    }

    return sanitized;
  }

  // Valida emojis
  validateEmojis(content) {
    const emojiRegex = /[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]|[\u{2600}-\u{26FF}]|[\u{2700}-\u{27BF}]/gu;
    const emojis = content.match(emojiRegex) || [];
    
    // Remove emojis n√£o permitidos
    const filteredEmojis = emojis.filter(emoji => this.allowedEmojis.has(emoji));
    
    // Substitui emojis n√£o permitidos por texto
    let result = content;
    emojis.forEach(emoji => {
      if (!this.allowedEmojis.has(emoji)) {
        result = result.replace(emoji, `[emoji:${emoji.codePointAt(0).toString(16)}]`);
      }
    });

    return result;
  }

  // Processa uma mensagem completa
  processMessage(content) {
    // Sanitiza primeiro
    let processed = this.sanitizeMessage(content);
    
    // Valida emojis
    processed = this.validateEmojis(processed);
    
    return processed;
  }

  // Verifica se uma mensagem √© spam
  isSpam(content, userHistory = []) {
    // Verifica mensagens repetidas
    const recentMessages = userHistory.slice(-5);
    const repeatedCount = recentMessages.filter(msg => 
      msg.content === content
    ).length;

    if (repeatedCount >= 3) {
      return true;
    }

    // Verifica mensagens muito curtas repetidas
    if (content.length < 3) {
      const shortMessages = recentMessages.filter(msg => 
        msg.content.length < 3
      ).length;
      
      if (shortMessages >= 5) {
        return true;
      }
    }

    // Verifica links suspeitos
    const urlRegex = /https?:\/\/[^\s]+/g;
    const urls = content.match(urlRegex) || [];
    
    if (urls.length > 2) {
      return true;
    }

    return false;
  }

  // Adiciona emoji √† lista permitida
  addAllowedEmoji(emoji) {
    this.allowedEmojis.add(emoji);
  }

  // Remove emoji da lista permitida
  removeAllowedEmoji(emoji) {
    this.allowedEmojis.delete(emoji);
  }

  // Obt√©m lista de emojis permitidos
  getAllowedEmojis() {
    return Array.from(this.allowedEmojis);
  }
}

module.exports = new MessageSanitizer(); 